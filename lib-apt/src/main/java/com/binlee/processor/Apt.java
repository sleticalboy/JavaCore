package com.binlee.processor;

import com.binlee.annotation.Gender;
import com.google.auto.service.AutoService;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import javax.annotation.processing.*;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;
import java.io.IOException;
import java.util.Collections;
import java.util.Set;

/**
 * @author binlee sleticalboy@gmail.com
 * created by IDEA on 2020/9/28
 */
@SupportedSourceVersion(SourceVersion.RELEASE_8)
@AutoService(Processor.class)
public class Apt extends AbstractProcessor {

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        return Collections.singleton(Gender.class.getName());
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latest();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        if (roundEnv.processingOver()) {
            generateFile();
            return false;
        }
        final Set<? extends Element> elements = roundEnv.getElementsAnnotatedWith(Gender.class);
        log(elements);
        if (elements == null || elements.size() == 0) {
            return false;
        }
        for (final Element element : elements) {
            log("process() -> " + element);
        }
        return true;
    }

    private void generateFile() {
        // build method
        final MethodSpec.Builder helloApt = MethodSpec.methodBuilder("helloApt");
        helloApt.addModifiers(Modifier.PUBLIC, Modifier.FINAL);
        helloApt.addStatement("System.out.println(\"Hello \" + $N)", "mVersion");
        // constructor
        final MethodSpec.Builder cstor = MethodSpec.constructorBuilder();
        cstor.addModifiers(Modifier.PUBLIC);
        cstor.addStatement("mVersion = \"$N\"", getClass().getName());
        // build class
        TypeSpec clazz = TypeSpec.classBuilder("Hello$$Apt")
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .addMethod(helloApt.build())
                .addMethod(cstor.build())
                .addJavadoc("auto generated by Apt, do not modify.")
                .addField(String.class, "mVersion", Modifier.PRIVATE, Modifier.FINAL)
                .build();
        // write to file
        try {
            JavaFile.builder("com.binlee.apt", clazz).build().writeTo(processingEnv.getFiler());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void log(Object obj) {
        String msg = null;
        if (obj != null) {
            msg = obj.toString();
        }
        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, msg);
    }
}
