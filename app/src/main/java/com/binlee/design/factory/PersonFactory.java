package com.binlee.design.factory;

import java.lang.reflect.Constructor;

/**
 * @author binlee sleticalboy@gmail.com
 * created by IDEA on 2020/10/13
 */
public final class PersonFactory implements IFactory<IPerson> {

    private final IFactory<? extends IPerson> mDelegate;

    @SuppressWarnings("unchecked")
    private PersonFactory() {
        // IxxxImpl_ class is generated by AbstractProcessor
        final String cls = getClass().getName() + "Impl_";
        IFactory<? extends IPerson> factory;
        try {
            final Class<?> implClass = getClass().getClassLoader().loadClass(cls);
            final Constructor<? extends IFactory<? extends IPerson>> constructor =
                    (Constructor<? extends IFactory<? extends IPerson>>) implClass.getConstructor();
            factory = constructor.newInstance();
        } catch (Throwable e) {
            throw new RuntimeException("", e);
        }
        mDelegate = factory;
    }

    @Override
    public IPerson create(String id) {
        return mDelegate.create(id);
    }
}
