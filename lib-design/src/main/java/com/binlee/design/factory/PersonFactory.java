package com.binlee.design.factory;

import com.binlee.design.bean.IPerson;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * @author binlee sleticalboy@gmail.com
 * created by IDEA on 2020/10/13
 */
public final class PersonFactory implements IFactory<IPerson> {

    private final Object mDelegate;
    private final Method mCreate;

    private PersonFactory() {
        // IxxxImpl_ class is generated by AbstractProcessor
        Object factory;
        Method create;
        final String cls = getClass().getName() + "Impl_";
        try {
            Class<?> implClass = getClass().getClassLoader().loadClass(cls);
            Constructor<?> constructor = implClass.getDeclaredConstructor();
            constructor.setAccessible(true);
            factory = constructor.newInstance();
            create = implClass.getDeclaredMethod("create", String.class);
            create.setAccessible(true);
        } catch (Throwable e) {
            throw new RuntimeException("", e);
        }
        mDelegate = factory;
        mCreate = create;
    }

    public static PersonFactory newInstance() {
        return new PersonFactory();
    }

    @Override
    public IPerson create(String id) {
        try {
            return (IPerson) mCreate.invoke(mDelegate, id);
        } catch (IllegalAccessException | InvocationTargetException e) {
            e.printStackTrace();
            throw new RuntimeException("create " + id + " error", e);
        }
    }
}
